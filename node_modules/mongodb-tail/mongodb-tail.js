
'use strict';

/**
 * @module mongodb-tail
 */

const EventEmitter = require('events').EventEmitter;

const tail = function () {
  if (this.latest) {
    const cursor = this.collection.find(this.build(this.latest), { tailable: true, numberOfRetries: this.numberOfRetries, tailableRetryInterval: this.tailableRetryInterval });
    const next = (err, item) => {
      if (err) {
        this.emitter.emit('error', err);
        setTimeout(() => this.tail(), this.errorTimeout);
      } else {
        if (item) {
          this.latest = item;
          this.emitter.emit('next', item);
        }
        cursor.nextObject(next);
      }
    };
    cursor.nextObject(next);
  } else {
    this.collection.find({}).sort({ $natural: -1 }).limit(1).nextObject((err, item) => {
      if (err) {
        this.emitter.emit('error', err);
        return setTimeout(() => this.tail(), this.errorTimeout);
      }
      if (!item) {
        this.emitter.emit('error', new Error('Collection is empty'));
        return setTimeout(() => this.tail(), this.errorTimeout);
      }
      this.latest = item;
      this.tail();
    });
  }
};

/**
 * @typedef {function} build - Function to build {@link https://docs.mongodb.org/manual/tutorial/query-documents/ | MongoDB query}
 * @param {object} latest - Latest document
 * @returns {object} - {@link https://docs.mongodb.org/manual/tutorial/query-documents/ | MongoDB query}
 */

/**
 * @typedef {object} tail - Instance of {@link https://nodejs.org/api/events.html#events_class_eventemitter | EventEmitter} 
 * @fires error - On error
 * @fires next - On cursor {@link https://docs.mongodb.org/manual/reference/method/cursor.next/ | next document}
 */

/**
 * Tail collection
 * @param {object} collection - {@link http://mongodb.github.io/node-mongodb-native/api-generated/collection.html | MongoDB collection}
 * @param {build} build - Function to build {@link https://docs.mongodb.org/manual/tutorial/query-documents/ | MongoDB query}
 * @param {object} [options] - {@link http://mongodb.github.io/node-mongodb-native/api-generated/cursor.html#constructor | Options}
 * @param {number} [options.numberOfRetries=Number.MAX_VALUE]
 * @param {number} [options.tailableRetryInterval=1000]
 * @param {number} [options.errorTimeout=1000]
 * @returns {tail} tail - Instance of EventEmitter
 */
module.exports = (collection, build, options) => {
  const emitter = new EventEmitter();
  const obj = Object.assign({ emitter: emitter, tail: tail, collection: collection, build: build, numberOfRetries: Number.MAX_VALUE, tailableRetryInterval: 1000, errorTimeout: 1000 }, options);
  obj.tail();
  return emitter;
};
