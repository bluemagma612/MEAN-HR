
'use strict';

const mongodb = require('mongodb');
const assert = require('assert');
const tail = require('../mongodb-tail');

describe('module', function () {
  const docsNum = 100, t0 = docsNum * 10, t1 = t0 * 2, ns = 'test.test';
  let itemsNum = 0, errorsNum = 0, db, local, collection;
  before((done) => {
    mongodb.connect('mongodb://localhost:27001,localhost:27002/test?replicaSet=rs', (err, connection) => {
      if (err) return done(err);
      db = connection;
      mongodb.connect('mongodb://localhost:27001,localhost:27002/local?replicaSet=rs', (err, connection) => {
        if (err) return done(err);
        local = connection;
        collection = db.collection('test');
        (collection.deleteMany || collection.remove).call(collection, {}, (err) => {
          if (err) return done(err);
          tail(
            local.collection('oplog.rs'),
            (latest) => ({ ts: { $gt: latest.ts }, fromMigrate: { $exists: false }, ns: ns, op: { $in: ['i', 'u', 'd'] } })
          )
            .on('error', () => (errorsNum++))
            .on('next', () => (itemsNum++));
          done();
        });
      });
    });
  });

  it('should tail "test.test" namespace insert op', function (done) {
    this.timeout(t1);
    (collection.insertMany || collection.insert).call(collection, Array.apply(null, new Array(docsNum)).map((n, i) => ({ i: i })), (err) => {
      if (err) return done(err);
      setTimeout(() => {
        assert.equal(errorsNum, 0);
        assert.equal(itemsNum, docsNum);
        done();
      }, t0);
    });
  });

  it('should tail "test.test" namespace update op', function (done) {
    this.timeout(t1);
    (collection.updateMany || collection.update).call(collection, {}, { $inc: { i: 1 } }, (err) => {
      if (err) return done(err);
      setTimeout(() => {
        assert.equal(errorsNum, 0);
        assert.equal(itemsNum, docsNum * 2);
        done();
      }, t0);
    });
  });

  it('should tail "test.test" namespace delete op', function (done) {
    this.timeout(t1);
    (collection.deleteMany || collection.remove).call(collection, {}, (err) => {
      if (err) return done(err);
      setTimeout(() => {
        assert.equal(errorsNum, 0);
        assert.equal(itemsNum, docsNum * 3);
        done();
      }, t0);
    });
  });

  it('should not tail "test.t" namespace insert op', (done) => {
    const coll = db.collection('t');
    (coll.insertMany || coll.insert).call(coll, Array.apply(null, new Array(10)).map((n, i) => ({ i: i })), (err) => {
      if (err) return done(err);
      setTimeout(() => {
        assert.equal(errorsNum, 0);
        assert.equal(itemsNum, docsNum * 3);
        done();
      }, 1000);
    });
  });

  it('shoud emit error when connection closed', (done) => {
    local.close((err) => {
      if (err) return done(err);
      setTimeout(() => {
        assert.equal(errorsNum, 1);
        done();
      }, 1000);
    });
  });

  after((done) => {
    db.close();
    done();
  });
});
